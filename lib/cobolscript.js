var cobolscript = (function() {    var TokenType = { Integer: 1, String: 2, Name: 3, Punctuation: 4 };        var punctuations = ".";        function Token(value, type)    {        this.value = value;        this.type = type;    };    function Lexer(text) {        var position = 0;                this.nextToken = function() {            var ch = nextFirstChar();                        if (ch == null)                return null;                        if (isLetter(ch))                return nextName(ch);                        if (isDigit(ch))                return nextNumber(ch);                            if (ch == '"')                return nextString();                            if (punctuations.indexOf(ch) >= 0)                return new Token(ch, TokenType.Punctuation);                        throw "unexpected '" + ch + "'";        }            function nextName(letter)        {            var name = letter;                        for (var ch = nextChar(); ch && (isLetter(ch) || isDigit(ch) || ch == '-'); ch = nextChar())                name += ch;            pushChar(ch);                        return new Token(name, TokenType.Name);        }        function nextString()        {            var name = '';                        for (var ch = nextChar(); ch && ch != '"'; ch = nextChar())                name += ch;                        if (!ch)                throw "unclosed string";                            return new Token(name, TokenType.String);        }                function nextNumber(digit)        {            var number = digit;                        for (var ch = nextChar(); ch && isDigit(ch); ch = nextChar())                number += ch;                            pushChar(ch);                            return new Token(parseInt(number), TokenType.Integer);        }        function nextFirstChar() {            if (!text)                return null;                            skipSpaces();                        if (position >= text.length)                return null;                            return nextChar();        }                function nextChar() {            return text[position++];        }        function pushChar(ch) {            if (ch)                position--;        }                function skipSpaces() {            while (position < text.length && isSpace(text[position]))                position++;        }                function isSpace(ch) {            if (ch <= ' ' && ch != '\n')                return true;                            return false;        }        function isLetter(ch) {            return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');        }                function isDigit(ch) {            return ch && ch >= '0' && ch <= '9';        }    };        function StringExpression(text)    {        this.compile = function() {            return '"' + text + '"';        };    }        function DisplayCommand(expr)    {        this.compile = function() {            return 'console.log(' + expr.compile() + ');';        }    }        function Parser(text) {        var lexer = new Lexer(text);                this.parseCommand = function() {            var token = lexer.nextToken();                        if (!token)                return null;                            if (token.value && token.value == "DISPLAY")            {                var expr = parseExpression();                                parseEndOfCommand();                                return new DisplayCommand(expr);            }        };                function parseExpression() {            var token = lexer.nextToken();                        if (!token)                return null;                            if (token.type = TokenType.String)                return new StringExpression(token.value);        }                function parseEndOfCommand() {            var token = lexer.nextToken();                        if (!token)                throw "unexpected end of input";                        if (token.value == "." && token.type == TokenType.Punctuation)                return;                            throw "unexpected '" + token.value + "'";        }    };        return {        Lexer: Lexer,        TokenType: TokenType,        Parser: Parser,        run: function(text) {            var func = new Function(text);            return func();        }    };})();if (typeof(window) === 'undefined') {	module.exports = cobolscript;}